What did we actually work through in the tutorial with jonh?

jun 15
  basics: walk through the proofs.
  adding unregister.
  re-proving rpc client Get.

jun 16
  discussing different specs for the concurrent tracker Register/Lookup.
  adding a P to is_tracker.
    going through all of the proofs to add it.
  specify and prove MakeTracker.
  adding ghost state point-to to basics tracker.
  start looking at kvservice Server.get()
  wrote specs for kvservice clerk on the board (ownership-based)
    and discussed there's something more we might want (logical atomicity)

jun 19
  discuss specs for kvservice RPCs (as opposed to clerk-provided specs)
  write spec on whiteboard for PUT rpc using invariant to transfer resources
    both sending to server and returning to client
  mechanize server-side PUT rpc spec
    server state: physical and ghost
    invariant for server state and for one RPC invocation
    state fupd lemmas for server executing first time and repeated execution
    prove lemmas

jun 20
  discuss TCB: lang.v, grove_ffi.v, Bank example of top-level demo spec
  client-side PUT rpc code
    state and prove lemmas for client RPC sending request, receiving reply
  logical atomicity: on the board
    how to implement a spinlock: what's inside is_lock?
    proof rule for using physically atomic compare-and-swap
    proof rule for using a logically-atomic conditional-put clerk call
    definition of logical-atomicity notation using fupd's
    ghost callback analogy
  logical atomicity: mechanization
    implementing a lock service on top of kvservice full_proof
    Go code, spec, proof for this lock service
